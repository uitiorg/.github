name: Org Deploy Workflow

on:
  workflow_dispatch:
    inputs:
      target_branch:
        description: '배포를 트리거할 브랜치 (예: main)'
        required: true
        default: 'main'
  pull_request:
    types: [closed]
  workflow_call:
    inputs:
      deploy-script:
        required: true
        type: string
      target-branch:
        required: false
        type: string
    secrets:
      REPO_NAME:
        required: true
      ACCESS_KEY:
        required: true
      SECRET_KEY:
        required: true
      INSTANCE_IP:
        required: true
      INSTANCE_USERNAME:
        required: true
      INSTANCE_KEY:
        required: true
      SSH_PORT:
        required: true

jobs:
  build:
    name: Build
    runs-on: [self-hosted, macOS, ARM64, Primary]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup jdk-17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'adopt'

      - name: Build with Gradle
        run: ./gradlew bootJar

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.SECRET_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # 멀티 아키텍처 이미지 빌드 옵션
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # - name: Build and push multi-platform image
      #   uses: docker/build-push-action@v5
      #   with:
      #     context: .
      #     platforms: linux/amd64,linux/arm64
      #     push: true
      #     tags: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.REPO_NAME }}:latest

      # 또는 AMD64 전용 이미지 빌드 옵션 (위 멀티 아키텍처 빌드 대신 사용)
      - name: Build, tag, and push the image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
          IMAGE_TAG: latest
        run: |
          # 명시적으로 linux/amd64 플랫폼 지정 (EC2 인스턴스에 맞춤)
          DOCKER_BUILDKIT=1 docker build --platform=linux/amd64 -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy:
    needs: build
    name: Deploy
    runs-on: [self-hosted, macOS, ARM64, Primary]
    if: |
      github.event_name == 'workflow_dispatch' ||
      (
        github.event_name == 'pull_request' &&
        github.event.pull_request.merged == true &&
        github.event.pull_request.base.ref == 'main' &&
        (
          startsWith(github.event.pull_request.head.ref, 'release/') ||
          startsWith(github.event.pull_request.head.ref, 'hotfix/')
        )
      ) ||
      github.event_name == 'workflow_call'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Print Deploy Info
        run: |
          echo "Deploy triggered by: ${{ github.event_name }}"
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "Target branch: ${{ github.event.inputs.target_branch }}"
          elif [ "${{ github.event_name }}" = "workflow_call" ]; then
            echo "Target branch: ${{ inputs.target-branch }}"
          else
            echo "PR merged from: ${{ github.event.pull_request.head.ref }}"
          fi
          
      - name: Deploy using macOS compatible commands
        run: |
          echo "${{ secrets.INSTANCE_KEY }}" > deploy_key.pem
          chmod 600 deploy_key.pem
      
          # 배포 스크립트 파일 원격 서버로 복사
          scp -P ${{ secrets.SSH_PORT }} -i deploy_key.pem -o StrictHostKeyChecking=no \
            ${{ inputs.deploy-script }} ${{ secrets.INSTANCE_USERNAME }}@${{ secrets.INSTANCE_IP }}:/home/ec2-user/
      
          # ss 명령어 관련 문제 해결을 위한 스크립트 수정
          sed -i '' 's/ss -tuln/netstat -tuln/g' ${{ inputs.deploy-script }}
      
          # 원격 서버에서 배포 스크립트 실행
          ssh -p ${{ secrets.SSH_PORT }} -i deploy_key.pem -o StrictHostKeyChecking=no \
            ${{ secrets.INSTANCE_USERNAME }}@${{ secrets.INSTANCE_IP }} "
              aws configure set aws_access_key_id ${{ secrets.ACCESS_KEY }}
              aws configure set aws_secret_access_key ${{ secrets.SECRET_KEY }}
              aws configure set default.region ap-northeast-2
              aws ecr get-login-password --region ap-northeast-2 | \
              docker login --username AWS --password-stdin \
              \$(aws sts get-caller-identity --query Account --output text).dkr.ecr.ap-northeast-2.amazonaws.com
              chmod +x ./$(basename ${{ inputs.deploy-script }})
              ./$(basename ${{ inputs.deploy-script }})
            "
      
          # 키 파일 정리
          rm -f deploy_key.pem          
