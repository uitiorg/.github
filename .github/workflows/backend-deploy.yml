name: Org Deploy Workflow

on:
  workflow_dispatch:
    inputs:
      target_branch:
        description: '배포를 트리거할 브랜치 (예: main)'
        required: true
        default: 'main'
  pull_request:
    types: [closed]
  workflow_call:
    inputs:
      deploy-script:
        required: true
        type: string
      target-branch:
        required: false
        type: string
    secrets:
      REPO_NAME:
        required: true
      ACCESS_KEY:
        required: true
      SECRET_KEY:
        required: true
      INSTANCE_IP:
        required: true
      INSTANCE_USERNAME:
        required: true
      INSTANCE_KEY:
        required: true
      SSH_PORT:
        required: true

jobs:
  build:
    name: Build
    runs-on: [self-hosted, macOS, ARM64]
    # runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup jdk-17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'adopt'

      - name: Build with Gradle
        run: ./gradlew bootJar

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.SECRET_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push the image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
          IMAGE_TAG: latest
        run: |
          DOCKER_BUILDKIT=1 docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  deploy:
    needs: build
    name: Deploy
    runs-on: [self-hosted, macOS, ARM64]
    # runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' ||
      (
        github.event_name == 'pull_request' &&
        github.event.pull_request.merged == true &&
        github.event.pull_request.base.ref == 'main' &&
        (
          startsWith(github.event.pull_request.head.ref, 'release/') ||
          startsWith(github.event.pull_request.head.ref, 'hotfix/')
        )
      ) ||
      github.event_name == 'workflow_call'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Print Deploy Info
        run: |
          echo "Deploy triggered by: ${{ github.event_name }}"
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "Target branch: ${{ github.event.inputs.target_branch }}"
          elif [ "${{ github.event_name }}" = "workflow_call" ]; then
            echo "Target branch: ${{ inputs.target-branch }}"
          else
            echo "PR merged from: ${{ github.event.pull_request.head.ref }}"
          fi

      - name: Copy Deploy Script
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.INSTANCE_IP }}
          username: ${{ secrets.INSTANCE_USERNAME }}
          key: ${{ secrets.INSTANCE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: ${{ inputs.deploy-script || 'deploy.sh' }}
          target: "/home/ec2-user/"

      - name: Connect Remote SSH And Execute Script
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.INSTANCE_IP }}
          username: ${{ secrets.INSTANCE_USERNAME }}
          key: ${{ secrets.INSTANCE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            aws configure set aws_access_key_id ${{ secrets.ACCESS_KEY }}
            aws configure set aws_secret_access_key ${{ secrets.SECRET_KEY }}
            aws configure set default.region ap-northeast-2
            aws ecr get-login-password --region ap-northeast-2 | \
            docker login --username AWS --password-stdin \
            "$(aws sts get-caller-identity --query Account --output text).dkr.ecr.ap-northeast-2.amazonaws.com"
            chmod +x ${{ inputs.deploy-script || 'deploy.sh' }}
            ./$(basename ${{ inputs.deploy-script || 'deploy.sh' }})
