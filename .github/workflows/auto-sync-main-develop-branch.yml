name: Sync Main Merged Branch to Develop

on:
  workflow_call:
    inputs:
      main_branch:
        description: '메인 브랜치 이름'
        required: false
        type: string
        default: 'main'
      develop_branch:
        description: '개발 브랜치 이름'
        required: false
        type: string
        default: 'develop'
    secrets:
      GITHUB_TOKEN:
        description: 'GitHub Token for API calls'
        required: true

jobs:
  sync:
    runs-on: self-hosted
    steps:
      - name: Checkout 코드
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: PR 생성 & 병합
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const inputs     = github.event.inputs || {};
            const mainBr     = inputs.main_branch   || github.event.pull_request.base.ref;
            const developBr  = inputs.develop_branch|| 'develop';
            let pr;

            // 1) PR 생성 시도
            try {
              const result = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo:  context.repo.repo,
                title: `Sync ${mainBr} → ${developBr} (${context.sha.slice(0,7)})`,
                head:  mainBr,
                base:  developBr,
                body:  `자동 동기화: ${mainBr} @ ${context.sha}`
              });
              pr = result.data;
            } catch (e) {
              // 차이가 없으면 워크플로 성공으로 종료
              if (e.status === 422 && e.message.includes('no_commits_between')) {
                console.log('두 브랜치에 차이가 없어 동기화가 필요 없습니다.');
                return;
              }
              throw e;
            }

            // 2) PR 자동 머지 시도
            try {
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo:  context.repo.repo,
                pull_number: pr.number,
                merge_method: 'merge'
              });
              console.log(`PR #${pr.number} 이 ${developBr}에 자동 머지되었습니다.`);
            } catch (e) {
              // 충돌 발생 시 알림만 남기고 성공 처리
              if ((e.status === 405 || e.status === 409) && e.message.includes('Merge conflict')) {
                console.log('충돌로 자동 머지가 실패했습니다. 수동으로 해결해주세요.');
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr.number,
                  body:  `자동 머지 중 충돌이 발생했습니다. 브랜치 간 충돌을 수동으로 해결해 주세요.`
                });
                return;
              }
              throw e;
            }
